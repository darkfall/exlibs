// ======================================================================================
// File         : LogMethod.cpp
// Author       : Wu Jie 
// Last Change  : 02/01/2010 | 00:50:52 AM | Monday,February
// Description  : 
// ======================================================================================

///////////////////////////////////////////////////////////////////////////////
// includes
///////////////////////////////////////////////////////////////////////////////

#include "exlibs.h"
#include "LogMethod.h"

// ######################### 
namespace ex { 
// ######################### 

///////////////////////////////////////////////////////////////////////////////
// LogMethod
///////////////////////////////////////////////////////////////////////////////

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void LogMethod::SetName ( const char* _name )
{
    ex::str::ncpy( m_name, MAX_LEN, _name, ex::str::len(_name) );
}

///////////////////////////////////////////////////////////////////////////////
// LogPrintf
///////////////////////////////////////////////////////////////////////////////

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void LogPrintf::logMsg( const char* _msg )
{
    ex::printf (_msg);
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void LogPrintf::logMsg( const wchar* _msg )
{
    ex::printf (_msg);
}

///////////////////////////////////////////////////////////////////////////////
// LogFile
///////////////////////////////////////////////////////////////////////////////

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

LogFile::LogFile ( const char* _fileName )
    : m_pFile (NULL)
{
    // Open the log file
    m_pFile = ex::fopen( _fileName, "wb" );
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

LogFile::~LogFile ()
{
    ex::fclose(m_pFile);
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void LogFile::logMsg( const char* _msg )
{
    size_t sizeToWrite = ex::str::len(_msg);
    size_t written = ex::fwrite ( _msg, 1, sizeToWrite, m_pFile );
    ex::fflush(m_pFile);
    ex_assert ( written == sizeToWrite, "Error, written size (%d) not match to writting size (%d).", written, sizeToWrite );
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void LogFile::logMsg( const wchar* _msg )
{
    // TODO:
}

///////////////////////////////////////////////////////////////////////////////
// LogCallback
///////////////////////////////////////////////////////////////////////////////

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

LogCallback::LogCallback ( pfn_char_t _pfn )
    : m_pfnChar (_pfn)
    , m_pfnWChar (NULL)
{
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

LogCallback::LogCallback ( pfn_wchar_t _pfn )
    : m_pfnChar (NULL)
    , m_pfnWChar (_pfn)
{
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

LogCallback::~LogCallback ()
{
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void LogCallback::logMsg( const char* _msg )
{
    if ( m_pfnChar )
        (*m_pfnChar)(_msg);
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void LogCallback::logMsg( const wchar* _msg )
{
    if ( m_pfnWChar )
        (*m_pfnWChar)(_msg);
}

///////////////////////////////////////////////////////////////////////////////
// LogObjectCallback
///////////////////////////////////////////////////////////////////////////////

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

LogObjectCallback::LogObjectCallback ( void* _pObj, pfn_char_t _pfn )
    : m_pObject (_pObj)
    , m_pfnChar (_pfn)
    , m_pfnWChar (NULL)
{
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

LogObjectCallback::LogObjectCallback ( void* _pObj, pfn_wchar_t _pfn )
    : m_pObject (_pObj)
    , m_pfnChar (NULL)
    , m_pfnWChar (_pfn)
{
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

LogObjectCallback::~LogObjectCallback ()
{
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void LogObjectCallback::logMsg( const char* _msg )
{
    if ( m_pfnChar )
        (*m_pfnChar)(m_pObject, _msg);
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void LogObjectCallback::logMsg( const wchar* _msg )
{
    if ( m_pfnWChar )
        (*m_pfnWChar)(m_pObject, _msg);
}

// ######################### 
} // end namespace ex 
// ######################### 


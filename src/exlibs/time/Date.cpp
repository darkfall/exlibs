// ======================================================================================
// File         : Date.cpp
// Author       : Wu Jie 
// Last Change  : 03/02/2010 | 13:34:51 PM | Tuesday,March
// Description  : 
// ======================================================================================

///////////////////////////////////////////////////////////////////////////////
// includes
///////////////////////////////////////////////////////////////////////////////

#include "exlibs.h"
#include "Date.h"

///////////////////////////////////////////////////////////////////////////////
// defines
///////////////////////////////////////////////////////////////////////////////

// ######################### 
namespace ex { 
// ######################### 

// ######################### 
namespace _private { 
// ######################### 

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

static const char* MonthName[12] = {
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
};

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

static const char* WeekName[7] = {
    "Mon",
    "Tues",
    "Wed",
    "Thur",
    "Fri",
    "Sat",
    "Sun",
};

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

static const uint8 MonthDays[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// ######################### 
} // end namespace _private 
// ######################### 

///////////////////////////////////////////////////////////////////////////////
// static member functions
///////////////////////////////////////////////////////////////////////////////

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

const char* Date::WeekDayName ( uint _wday )
{
    if ( _wday < 1 || _wday > 7 )
        return "invalid";
    return _private::WeekName[_wday-1];
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

const char* Date::MonthName ( uint _month )
{
    if ( _month < 1 || _month > 12 )
        return "invalid";
    return _private::MonthName[_month-1];
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

bool Date::isValid ( uint _year, uint _month, uint _day )
{
    if ( _month<1 || _month>12 || _day<1 || _day>31 )
    {
        return false;
    }
    return true;
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

bool Date::IsLeapYear ( uint _year )
{
    return ((_year%4==0) && (_year%100!=0)) || (_year%400==0);
}

// ------------------------------------------------------------------ 
// Desc: 
// NOTE: the input y,m,d must be int
// ------------------------------------------------------------------ 

void Date::greg2jul ( uint* _pJul_out, int _year, int _month, int _day )
{
    if( !isValid ( _year, _month, _day ) )
    {
        ex_warning ( "can't set date (%dy,%dm,%dd). the value is invalid!", _year, _month, _day );
        *_pJul_out = 0;
        return;
    }

    *_pJul_out = (1461*(_year+4800+(_month-14)/12))/4+(367*(_month-2-12*((_month-14)/12)))/12-(3*((_year+4900+(_month-14)/12)/100))/4+_day-32075;
}

// ------------------------------------------------------------------ 
// Desc: 
// NOTE: the input y,m,d must be int
// ------------------------------------------------------------------ 

void Date::jul2greg ( uint _jul, int* _pYear_out, int* _pMonth_out, int* _pDay_out )
{
    register int l,n,i,j;
    l=_jul+68569;
    n=(4*l)/146097;
    l=l-(146097*n+3)/4;
    i=(4000*(l+1))/1461001;
    l=l-(1461*i)/4+31;
    j=(80*l)/2447;
    *_pDay_out=l-(2447*j)/80;
    l=j/11;
    *_pMonth_out=j+2-(12*l);
    *_pYear_out=100*(n-49)+i+l;
}

///////////////////////////////////////////////////////////////////////////////
// defiens
///////////////////////////////////////////////////////////////////////////////

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

Date::Date ()
    : m_Julian(0)
{
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

Date::Date ( const Date& _date )
    : m_Julian(_date.m_Julian)
{
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

Date::Date ( uint _julianDays )
    : m_Julian(_julianDays)
{
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

Date::Date ( uint _year, uint _month, uint _day )
{
    set (_year, _month, _day);
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void Date::set ( uint _julian )
{
    m_Julian = _julian;
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

void Date::set ( uint _year, uint _month, uint _day )
{
    Date::greg2jul(&m_Julian, _year, _month, _day);
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

uint Date::Day () const
{
    int d,m,y;
    Date::jul2greg ( m_Julian, &y, &m, &d );
    return d;
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

uint Date::Month () const
{
    int d,m,y;
    Date::jul2greg ( m_Julian, &y, &m, &d );
    return m;
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

uint Date::Year () const
{
    int d,m,y;
    Date::jul2greg ( m_Julian, &y, &m, &d );
    return y;
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

uint Date::DayOfWeek () const
{
    return (m_Julian+1) % 7;
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

uint Date::DayOfYear () const
{
    int y,m,d;
    uint jd;
    Date::jul2greg ( m_Julian, &y, &m, &d );
    Date::greg2jul ( &jd, y, 1, 1 );

    return m_Julian-jd+1;
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

uint Date::DaysInMonth () const
{
    int y,m,d;
    Date::jul2greg ( m_Julian, &y, &m, &d );

    if( m==2 && Date::IsLeapYear(y) )
        return 29;

    return _private::MonthDays[m-1];
}

// ------------------------------------------------------------------ 
// Desc: 
// ------------------------------------------------------------------ 

bool Date::IsLeapYear() const
{
    return Date::IsLeapYear( Year() );
}

// ######################### 
} // end namespace ex 
// ######################### 

